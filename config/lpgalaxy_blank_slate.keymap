 /*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define SFT_L 1
#define FNC_L 2
#define CTRL_L 3
#define UTIL_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
        zmk,matrix_transform = &ortho_transform;
    };

    macros {
        ZMK_MACRO(thumbs_up,
            wait-ms = <1>;
            tap-ms = <5>;
            bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
        )
    };

    tap_dances {
        shifty: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFTY";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
&kp ESC     &kp Q       &kp W     &kp E     &kp R       &kp T       &kp Y       &kp U       &kp I       &kp O       &kp P        &kp BSPC
&kp TAB     &kp A       &kp S     &kp D     &kp F       &kp G       &kp H       &kp J       &kp K       &kp L       &kp SEMI     &kp SQT
&kp LSHIFT  &kp Z       &kp X     &kp C     &kp V       &kp B       &kp N       &kp M       &kp COMMA   &kp DOT     &kp SLASH    &mt RSHIFT RET
&kp LCTRL   &kp LCTRL   &kp LALT  &kp LGUI  &mo SFT_L   &kp SPACE   &mo CTRL_L  &mo SFT_L   &kp LEFT    &kp DOWN    &kp UP       &kp RIGHT
            >;
        };

        sft_layer {
            label = "Shift";
            bindings = <
&none       &kp AMPS   &kp STAR    &none       &none       &kp LPAR    &kp RPAR   &none       &kp N7   &kp N8   &kp N9   &none
&kp GRAVE   &kp DLLR   &kp PRCNT   &kp CARET   &none       &kp LBKT    &kp RBKT   &kp BSLH    &kp N4   &kp N5   &kp N6   &none 
&none       &kp EXCL   &kp AT      &kp HASH    &none       &kp MINUS   &kp EQUAL  &none       &kp N1   &kp N2   &kp N3   &none
&none       &none      &none       &none       &mo FNC_L   &none       &trans     &mo FNC_L   &none    &kp N0   &none    &none
            >;
        };

        fnc_layer {
            label = "Function";
            bindings = <
&kp F1      &kp F2   &kp F3   &kp F4      &kp F5      &kp F6      &kp F7      &kp F8     &kp F9    &kp F10     &kp F11      &kp F12
&kp TILDE   &none    &none    &none       &none       &kp LBRC    &kp RBRC    &kp PIPE   &none     &kp PG_DN   &kp PG_UP    &kp PSCRN 
&none       &none    &none    &none       &none       &kp UNDER   &kp PLUS    &none      &none     &kp END     &kp HOME     &none
&none       &none    &none    &none       &trans      &none       &trans      &trans     &none     &kp DEL     &kp INS      &none
            >;
        };

        ctrl_layer {
            label = "Control";
            bindings = <
&none   &kp C_PREV     &kp C_NEXT     &kp C_PP      &none   &none   &none       &none       &none   &none       &none   &none
&none   &kp C_VOL_DN   &kp C_VOL_UP   &kp C_MUTE    &none   &none   &kp LEFT    &kp DOWN    &kp UP  &kp RIGHT   &none   &none
&none   &none          &none          &none         &none   &none   &none       &none       &none   &none       &none   &none
&none   &none          &none          &none         &none   &none   &trans      &none       &none   &none       &none   &mo UTIL_L
            >;
        };

        util_layer {
            label = "Utility";
            bindings = <
&bt BT_CLR  &bt BT(0)   &bt BT(1)   &bt BT(2)   &bt BT(3)   &bt BT(4)   &none   &none   &none   &none   &none   &bootloader
&none       &none       &none       &none       &none       &none       &none   &none   &none   &none   &none   &none
&none       &none       &none       &none       &none       &none       &none   &none   &none   &none   &none   &none
&none       &none       &none       &none       &none       &none       &none   &none   &none   &none   &none   &trans
            >;
        };

    };
};

